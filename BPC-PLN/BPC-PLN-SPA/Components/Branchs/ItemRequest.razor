@page "/ItemRequest"
@using Application.Convertor
@using Data.Context
@using Domain.Dtos
@using Domain.Entities.Item
@using Domain.Entities.User
@using Microsoft.EntityFrameworkCore
@inject BpcwebserverDbContext bpcwebserverDbContext
@inject IHttpContextAccessor HttpContextAccessor
@inject IJSRuntime JS
@inject NavigationManager NavigationManager

<PageTitle>درخواست کالا</PageTitle>

<div>
    <ItemRequestHeader OnHeaderLoaded="SetHeaderData"
                       OnAddressSelected="SetSelectedAddress" />
    <div class="border p-1 mb-2">
        <div class="row align-items-end">
            <div class="col-2">
                <label>کد کالا:</label>
                <input class="form-control"
                       inputmode="numeric"
                       maxlength="5"
                       minlength="5"
                       @bind="ProductCodeInput"
                       @bind:event="oninput"
                       @onblur="GetProductPreview"
                       placeholder="۵رقم" />
            </div>
            <div class="col-2">
                <label>تعداد واحد کل:</label>
                <input class="form-control" inputmode="numeric" @bind="QuantityInput" />
            </div>
            <div class="col-1 ">
                <button class="btn btn-primary mt-3" @onclick="AddItem">ثبت</button>
            </div>
            <div class="col-6 d-flex align-items-center justify-content-center">
                <label class="text-danger">@ProductNamePreview</label>
            </div>
        </div>
    </div>

    <div class="d-flex flex-column" style="height: 67vh; min-height: 300px;">
        <div style="flex-grow: 1; overflow-y: auto;">
            <table class="table table-bordered text-center mb-0">
                <thead class="table-primary sticky-top">
                    <tr>
                        <th>کد کالا</th>
                        <th>شرح کالا</th>
                        <th>واحد</th>
                        <th>تعداد</th>
                        <th>وزن ناخالص</th>
                        <th>وزن خالص</th>
                        <th>حذف</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Items)
                    {
                        <tr>
                            <td>@item.ProductCode</td>
                            <td>@item.ProductName</td>
                            <td>@item.Unit</td>
                            <td>@item.Quantity</td>
                            <td>@item.GrossWeight</td>
                            <td>@item.NetWeight</td>
                            <td>
                                <button class="btn btn-sm btn-danger" @onclick="() => DeleteItem(item)">حذف</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="border-top p-2 mt-auto d-flex flex-wrap gap-2 align-items-end">
            <div class="col-12 col-sm-2 text-center">
                <button type="submit" class="btn btn-outline-orange w-100" @onclick="Send">ارسال</button>
            </div>
            <div class="col">
                <label class="form-label small mb-1">تعداد کل:</label>
                <input type="text" class="form-control form-control-sm" disabled @bind="totalRequest.Quantity" />
            </div>
            <div class="col">
                <label class="form-label small mb-1">وزن ناخالص:</label>
                <input type="text" class="form-control form-control-sm" disabled @bind="totalRequest.GrossWeight" />
            </div>
            <div class="col">
                <label class="form-label small mb-1">وزن خالص:</label>
                <input type="text" class="form-control form-control-sm" disabled @bind="totalRequest.NetWeight" />
            </div>
        </div>
    </div>
    </div>

  
   
@code {
    private List<ItemRowViewModel> Items = new();
    private TotalRequest totalRequest = new();

    private string ProductCodeInput { get; set; } = "";
    private int QuantityInput { get; set; }
    private string ProductNamePreview = "";

    private HeaderBranchDto HeaderData = new();
    private void SetHeaderData(HeaderBranchDto model) => HeaderData = model;

    private string SelectedAddress = "";
    private void SetSelectedAddress(string address) => SelectedAddress = address;


    private async Task AddItem()
    {
        ProductNamePreview = "";



        if (ProductCodeInput.Length != 5 && !ProductCodeInput.All(char.IsDigit))
        {
            ProductNamePreview = "کد کالا به درستی وارد نشده است (فقط ۵ رقم عددی)";
            return;
        }

        if (string.IsNullOrWhiteSpace(ProductCodeInput) || QuantityInput <= 0)
        {
            ProductNamePreview = "کد کالا و تعداد الزامی هستند";
            return;
        }

        if (Items.Any(p => p.ProductCode.ToString().StartsWith(ProductCodeInput)))
        {
            ProductNamePreview = "این کالا قبلا ثبت شده است لطفا برای ویرایش تعداد سطر قبلی را حذف و تعداد دلخواه جدید را وارد نمایید";
            ProductCodeInput = "";
            QuantityInput = 0;
            return;
        }

        var product = await bpcwebserverDbContext.Products
             .FromSqlRaw("SELECT TOP 1 * FROM LG_006_ItemsConvfact WHERE LEFT(ITEMCODE, 5) = {0}", ProductCodeInput)
             .AsNoTracking().FirstOrDefaultAsync();

        if (product == null)
        {
            ProductNamePreview = "کالایی با این کد پیدا نشد";
            return;
        }

        Items.Add(new ItemRowViewModel
        {
            ProductCode = product.ItemCode,
            ProductName = product.ItemName,
            Unit = product.UnitSetCode,
            Quantity = QuantityInput,
            GrossWeight = QuantityInput * product.GrossWeight,
            NetWeight = QuantityInput * product.Width
        });

        ProductCodeInput = "";
        QuantityInput = 0;
        ProductNamePreview = "";
        CalculateTotal();
    }

    private async void DeleteItem(ItemRowViewModel item)
    {
        if (!await JS.InvokeAsync<bool>("confirm", "آیا از حذف کالا مطمئن هستید؟"))
            return;

        Items.Remove(item);
        CalculateTotal();
    }

    private async Task GetProductPreview()
    {

        if (ProductCodeInput.Length != 5 || !ProductCodeInput.All(char.IsDigit))
        {
            ProductNamePreview = "کد کالا باید ۵ رقم عددی باشد";
            return;
        }

        var product = await bpcwebserverDbContext.Products
            .FromSqlRaw("SELECT TOP 1 * FROM LG_006_ItemsConvfact WHERE LEFT(ITEMCODE, 5) = {0}", ProductCodeInput)
            .AsNoTracking().FirstOrDefaultAsync();

        if (product == null)
        {
            ProductNamePreview = "کالایی با این کد یافت نشد";
            return;
        }

        ProductNamePreview = product.ItemName;
    }

    private void CalculateTotal()
    {
        totalRequest.Quantity = Items.Sum(x => x.Quantity).ToString();
        totalRequest.GrossWeight = Items.Sum(x => x.GrossWeight).ToString("0.###");
        totalRequest.NetWeight = Items.Sum(x => x.NetWeight).ToString("0.###");
    }

    private async Task Send()
    {
        if (!Items.Any())
        {
            await JS.InvokeVoidAsync("alert", "هیچ آیتمی ثبت نشده است!");
            return;
        }

        bool confirm = await JS.InvokeAsync<bool>("confirm", "آیا از ارسال درخواست مطمئن هستید؟");
        if (!confirm)
            return;

        var header = new RequestOrderHeader
        {
            RequestNumber = HeaderData.RequestCode,
            BranchCode = HeaderData.BranchCode,
            BranchName = HeaderData.BranchName,
            WareCode = HeaderData.WareCode,
            RequestDate = DateTime.Now.ToShamsi(),
            RequestTime = DateTime.Now.ToString("HH:mm"),
            RequestType = "ویژه",
            DeliveryCode = HeaderData.DeliveryPlace,
            DeliveryDefinition = HeaderData.Definition,
            DeliveryAdd = SelectedAddress,
            Lines = Items.Select(item => new RequestOrderLine
            {
                ItemCode = item.ProductCode,
                ItemDefinition = item.ProductName,
                Usc = item.Unit,
                Amount = item.Quantity
            }).ToList()
        };


        bpcwebserverDbContext.Add(header);
        await bpcwebserverDbContext.SaveChangesAsync();

        Items.Clear();
        totalRequest = new();
        await JS.InvokeVoidAsync("alert", "درخواست با موفقیت ثبت شد.");
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);

    }



}

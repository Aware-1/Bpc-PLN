@page "/ItemRequest"
@using System.Globalization
@using Application.Convertor
@using Data.Context
@using Domain.Dtos
@using Domain.Entities
@using Domain.Entities.User
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using System.IdentityModel.Tokens.Jwt


@inject BpcwebserverDbContext bpcwebserverDbContext
@inject UnityDbContext UnityDbContext
@inject IHttpContextAccessor HttpContextAccessor


<PageTitle>درخواست کالا</PageTitle>

<div class="border p-3 mb-3">
    <div class="row mb-2">
        <div class="col-2 text-end fw-bold">تاریخ:</div>
        <div class="col-2 text-end">@DateTime.Now.ToShamsi()</div>

        <div class="col-2 text-end fw-bold">نوع درخواست:</div>
        <div class="col-2 text-end">ویژه</div>

        <div class="col-2 text-end fw-bold">شماره درخواست:</div>
        <div class="col-2 text-end">@HeaderModel.RequestCode</div>

        <div class="col-2 text-end fw-bold">شرح حسابهای دریافتنی:</div>
        <div class="col-2 text-end">@HeaderModel.Definition</div>

        <div class="col-2 text-end fw-bold">کد حسابهای دریافتنی:</div>
        <div class="col-2 text-end">@HeaderModel.DeliveryPlace</div>

    </div>

    <div class="row">
        <div class="col-2 text-end fw-bold">آدرس تحویل:</div>
        <div class="col-10 text-end">@HeaderModel.Address</div>
    </div>
</div>

<div class="border p-3 mb-3">
    <div class="row align-items-end">
        <div class="col-2">
            <label>کد کالا:</label>
            <input class="form-control"
            inputmode="numeric"
            maxlength="5"
            minlength="5"
            @bind="ProductCodeInput"
            @bind:event="oninput"
            placeholder="مثلاً: 12345" />
        </div>
        <div class="col-2">
            <label>تعداد واحد کل:</label>
            <input class="form-control" inputmode="numeric" @bind="QuantityInput" />
        </div>
        <div class="col-2">
            <button class="btn btn-dark mt-3" @onclick="AddItem">ثبت</button>
        </div>
        <div class="col-4 mt-2">
            <label class="text-danger">@ProductNamePreview</label>
        </div>
    </div>
</div>

<table class="table table-bordered text-center">
    <thead class="table-secondary">
        <tr>
            <th>حذف</th>
            <th>کد کالا</th>
            <th>شرح کالا</th>
            <th>واحد</th>
            <th>تعداد</th>
            <th>وزن ناخالص</th>
            <th>وزن خالص</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Items)
        {
            <tr>
                <td>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteItem(item)">حذف</button>
                </td>
                <td>@item.ProductCode</td>
                <td>@item.ProductName</td>
                <td>@item.Unit</td>
                <td>@item.Quantity</td>
                <td>@item.GrossWeight</td>
                <td>@item.NetWeight</td>
            </tr>
        }
    </tbody>
</table>

@code {
    private List<ItemRowViewModel> Items = new();
    private BranchUser Model = new();
    private ItemHeaderModel HeaderModel = new();

    private string _productCodeInput;
    private string ProductCodeInput
    {
        get => _productCodeInput;
        set
        {
            if (value.ToString().All(char.IsDigit) && value.ToString().Length == 5)
            {
                _productCodeInput = value;
                _ = CheckProductAsync();
            }
            else
            {
                _productCodeInput = value; 
            }
        }
    }
    private int QuantityInput;
    private string ProductNamePreview = "";


    protected override async Task OnInitializedAsync()
    {
        string? accessToken = HttpContextAccessor.HttpContext?.Request.Cookies["access_token"];
        if (string.IsNullOrWhiteSpace(accessToken))
            return;

        var handler = new JwtSecurityTokenHandler();
        var jwtToken = handler.ReadJwtToken(accessToken);

        string? userName = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Name)?.Value;
        string? role = jwtToken.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;

        if (string.IsNullOrWhiteSpace(userName))
            return;
        var persian = new CultureInfo("fa-IR");
        persian.DateTimeFormat.Calendar = new PersianCalendar();

        var now = DateTime.Now;

        var userInfo = await UnityDbContext.BranchUsers
            .Where(u => u.UserName.Trim() == userName.Trim())
            .Select(u => new HeaderBranchDto
                {
                    Date = now,
                    RequestCode = u.BranchCode + now.ToString("yyMMddHHmms", persian),
                    Address = u.Addr1,
                    DeliveryPlace = u.Code,
                    Definition = u.Definition_
                })
            .FirstOrDefaultAsync();

        if (userInfo != null)
        {
            HeaderModel = new ItemHeaderModel
                {
                    Date = userInfo.Date,
                    RequestCode = userInfo.RequestCode,
                    Address = userInfo.Address,
                    DeliveryPlace = userInfo.DeliveryPlace,
                    Definition = userInfo.Definition
                };
        }
    }

    private async Task CheckProductAsync()
    {
        ProductNamePreview = "";

        if (ProductCodeInput is null)
            return;

        var product = await bpcwebserverDbContext.Products
            .AsNoTracking()
            .FirstOrDefaultAsync(p => p.ItemCode == ProductCodeInput);

        ProductNamePreview = product != null
            ? $"نام کالا: {product.ItemName}"
            : "همچین محصولی پیدا نشد";

        StateHasChanged();
    }

    private async Task AddItem()
    {
        Console.WriteLine("بیا دیگه علی پروین");
        if (ProductCodeInput is null || QuantityInput <= 0)
            return;

        var product = bpcwebserverDbContext.Products.AsEnumerable()
        .FirstOrDefault(p => p.ItemCode.ToString().StartsWith(ProductCodeInput));

        if (product == null)
        {
            ProductNamePreview = "همچین محصولی پیدا نشد";
            return;
        }

        Items.Add(new ItemRowViewModel
            {
                ProductCode = product.ItemCode,
                ProductName = product.ItemName,
                Unit = product.UnitSetCode,
                Quantity = QuantityInput,
                GrossWeight = QuantityInput * product.GrossWeight,
                NetWeight = QuantityInput * product.Width
            });

        ProductCodeInput = "";
        QuantityInput = 0;
        ProductNamePreview = "";
    }

    private void DeleteItem(ItemRowViewModel item)
    {
        Items.Remove(item);
    }

    public class ItemHeaderModel
    {
        public DateTime Date { get; set; }
        public string RequestCode { get; set; }
        public string Address { get; set; }
        public string Definition { get; set; }
        public string DeliveryPlace { get; set; }
    }

    public class ItemRowViewModel
    {
        public string ProductCode { get; set; }
        public string ProductName { get; set; }
        public string Unit { get; set; }
        public int Quantity { get; set; }
        public decimal GrossWeight { get; set; }
        public decimal NetWeight { get; set; }
    }
}

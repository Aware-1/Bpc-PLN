@page "/login"
@using BPC_PLN_SPA.Service
@using Domain.Dtos
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@attribute [AllowAnonymous]

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="card shadow-sm p-6" style="width: 100%; max-width: 400px;">
        <div class="card-body">
            <h3 class="text-center mb-4">Login To App</h3>
            <EditForm Model="ViewModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label>نوع ورود:</label><br />

                    <input type="radio" class="btn-check" name="accessType" id="typeA" autocomplete="off"
                           @onchange="() => ViewModel.AccessType = DbAccessType.Branch"
                           checked="@(ViewModel.AccessType == DbAccessType.Branch)" />
                    <label class="btn btn-outline-primary me-2" for="typeA">ورود شعب</label>

                    <input type="radio" class="btn-check" name="accessType" id="typeB" autocomplete="off"
                           @onchange="() => ViewModel.AccessType = DbAccessType.Provider"
                           checked="@(ViewModel.AccessType == DbAccessType.Provider)" />
                    <label class="btn btn-outline-primary me-2" for="typeB">ورود تامین‌کننده</label>

                    <input type="radio" class="btn-check" name="accessType" id="typeC" autocomplete="off"
                           @onchange="() => ViewModel.AccessType = DbAccessType.Main"
                           checked="@(ViewModel.AccessType == DbAccessType.Main)" />
                    <label class="btn btn-outline-primary me-2" for="typeC">برنامه‌ریزی</label>
                </div> 
                <div class="form-group">
                    <label for="username">Username:</label>
                    <InputText id="username" class="form-control" @bind-Value="ViewModel.Username" />
                </div>
                <div class="form-group mt-3">
                    <label for="password">Password:</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="ViewModel.Password" />
                </div>
                <div class="form-group mt-4 text-center">
                    <button class="btn btn-primary btn-block" type="submit" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="sr-only">Loading...</span>
                        }
                        else
                        {
                            <span>Login</span>
                        }
                    </button>
                </div>
                @if (!string.IsNullOrEmpty(ErrorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        @ErrorMessage
                    </div>
                }
            </EditForm>
        </div>
    </div>
</div>
<script src="extensions.js"></script>

@code {

    [SupplyParameterFromForm]
    private LoginDto ViewModel { get; set; } = new();

    private string? ErrorMessage;
    private bool isLoading = false;

    private async void HandleLogin()
    {
        isLoading = true;
        try
        {
            var customAuthenticationStateProvider = (CustomAuthStateProvider)AuthenticationStateProvider;
            var token = customAuthenticationStateProvider.Login(ViewModel);



            // HttpContextAccessor.HttpContext!.Response.Cookies.Append(AuthCookieName, token, new CookieOptions
            //     {
            //         HttpOnly = true,
            //         Expires = DateTimeOffset.Now.AddMinutes(30),
            //     });
            //NavigationManager.NavigateTo("/postlogin?Token=" + token, true);



            await JSRuntime.InvokeVoidAsync("eval", $"document.cookie = 'access_token={token}; path=/; expires=' + new Date(Date.now() + 86400000).toUTCString();");

            //await JSRuntime.InvokeVoidAsync($"document.cookie + ';access_token={token}'");

            // سیو کوکی توکن با جاوا اسکریپت در بلیزور به نام access_token
            NavigationManager.NavigateTo("/", true);

        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }


}

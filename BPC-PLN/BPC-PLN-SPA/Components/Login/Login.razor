@page "/login"
@attribute [AllowAnonymous]
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims
@using Data.Context
@using Domain.Dtos
@using Domain.Entities
@using Microsoft.AspNetCore.Authorization
@inject IServiceProvider ServiceProvider
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>ورود</PageTitle>

<h3 class="text-center mb-4">ورود</h3>
<hr />

<div class="mb-3">
    <label>نام کاربری:</label>
    <input class="form-control" @bind="ViewModel.Username" />
</div>

<div class="mb-3">
    <label>رمز عبور:</label>
    <input class="form-control" type="password" @bind="ViewModel.Password" />
</div>

<div class="mb-3">
    <label>نوع ورود:</label><br />

    <input type="radio" class="btn-check" name="accessType" id="typeA" autocomplete="off"
           @onchange="() => ViewModel.AccessType = DbAccessType.Branch"
           checked="@(ViewModel.AccessType == DbAccessType.Branch)" />
    <label class="btn btn-outline-primary me-2" for="typeA">ورود شعب</label>

    <input type="radio" class="btn-check" name="accessType" id="typeB" autocomplete="off"
           @onchange="() => ViewModel.AccessType = DbAccessType.Provider"
           checked="@(ViewModel.AccessType == DbAccessType.Provider)" />
    <label class="btn btn-outline-primary me-2" for="typeB">ورود تامین‌کننده</label>

    <input type="radio" class="btn-check" name="accessType" id="typeC" autocomplete="off"
           @onchange="() => ViewModel.AccessType = DbAccessType.Main"
           checked="@(ViewModel.AccessType == DbAccessType.Main)" />
    <label class="btn btn-outline-primary me-2" for="typeC">برنامه‌ریزی</label>
</div>

<button class="btn btn-success" @onclick="HandleLogin">ورود</button>

@if (!string.IsNullOrWhiteSpace(ErrorMessage))
{
    <div class="alert alert-danger mt-3">@ErrorMessage</div>
}

@code {
    private LoginBranchDto ViewModel = new();
    private BranchUser Model = new();
    private string ErrorMessage;

    private async Task HandleLogin()
    {
        try
        {
            bool success = false;
            string role = "";
            string fullName = "";

            if (ViewModel.AccessType == DbAccessType.Branch)
            {
                using var db = ServiceProvider.GetRequiredService<UnityDbContext>();
                Model = db.BranchUsers.FirstOrDefault(u =>
                   u.Name.Trim() == ViewModel.Username.Trim() &&
                   u.Password.Trim() == ViewModel.Password.Trim());


                if (Model is not null)
                {
                    success = true;
                    role = "Branch";
                    fullName = Model.UserName;
                }
            }
            else if (ViewModel.AccessType == DbAccessType.Provider)
            {
                using var db = ServiceProvider.GetRequiredService<BpcwebserverDbContext>();
                var user = db.ProviderUsers.FirstOrDefault(u =>
                    u.Username.Trim() == ViewModel.Username.Trim() &&
                    u.Password.Trim() == ViewModel.Password.Trim());

                if (user is not null)
                {
                    success = true;
                    role = "Provider";
                    fullName = user.Username;
                }
            }
            else if (ViewModel.AccessType == DbAccessType.Main)
            {//todo switch case role
                role = "Admin";
                success = true;
                fullName = "AdminUser";
            }

            if (success)
            {
                var claims = new List<Claim>
                {
                    new(ClaimTypes.Name, Model.UserName),
                    // new(ClaimTypes., role),
                };

                var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
                var principal = new ClaimsPrincipal(identity);

                await HttpContextAccessor.HttpContext.SignInAsync(
                    CookieAuthenticationDefaults.AuthenticationScheme, principal);

                Navigation.NavigateTo("/");
            }
            else
            {
                ErrorMessage = "نام کاربری یا رمز اشتباه است.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"خطا در ورود: {ex.Message}";
        }
    }


}
